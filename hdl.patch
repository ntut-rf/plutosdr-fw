diff --git a/library/axi_ad9361/axi_ad9361_rx.v b/library/axi_ad9361/axi_ad9361_rx.v
index eef67817..e641c2b3 100644
--- a/library/axi_ad9361/axi_ad9361_rx.v
+++ b/library/axi_ad9361/axi_ad9361_rx.v
@@ -261,6 +261,7 @@ module axi_ad9361_rx #(
 
   // channel 2 (i)
 
+  generate if (MODE_1R1T == 0) begin
   axi_ad9361_rx_channel #(
     .Q_OR_I_N (0),
     .CHANNEL_ID (2),
@@ -295,9 +296,12 @@ module axi_ad9361_rx #(
     .up_raddr (up_raddr),
     .up_rdata (up_rdata_s[2]),
     .up_rack (up_rack_s[2]));
+  end
+  endgenerate
 
   // channel 3 (q)
 
+  generate if (MODE_1R1T == 0) begin
   axi_ad9361_rx_channel #(
     .Q_OR_I_N (1),
     .CHANNEL_ID (3),
@@ -332,6 +336,8 @@ module axi_ad9361_rx #(
     .up_raddr (up_raddr),
     .up_rdata (up_rdata_s[3]),
     .up_rack (up_rack_s[3]));
+  end
+  endgenerate
 
   // common processor control
 
diff --git a/library/axi_ad9361/axi_ad9361_tx.v b/library/axi_ad9361/axi_ad9361_tx.v
index 8f21fddb..b035153e 100644
--- a/library/axi_ad9361/axi_ad9361_tx.v
+++ b/library/axi_ad9361/axi_ad9361_tx.v
@@ -288,6 +288,7 @@ module axi_ad9361_tx #(
 
   // dac channel
 
+  generate if (MODE_1R1T == 0) begin
   axi_ad9361_tx_channel #(
     .CHANNEL_ID (2),
     .Q_OR_I_N (0),
@@ -320,9 +321,12 @@ module axi_ad9361_tx #(
     .up_raddr (up_raddr),
     .up_rdata (up_rdata_s[2]),
     .up_rack (up_rack_s[2]));
+  end
+  endgenerate
 
   // dac channel
 
+  generate if (MODE_1R1T == 0) begin
   axi_ad9361_tx_channel #(
     .CHANNEL_ID (3),
     .Q_OR_I_N (1),
@@ -355,6 +359,8 @@ module axi_ad9361_tx #(
     .up_raddr (up_raddr),
     .up_rdata (up_rdata_s[3]),
     .up_rack (up_rack_s[3]));
+  end
+  endgenerate
 
   // dac common processor interface
 
diff --git a/projects/scripts/adi_board.tcl b/projects/scripts/adi_board.tcl
index caec9fb9..9d6d66c8 100644
--- a/projects/scripts/adi_board.tcl
+++ b/projects/scripts/adi_board.tcl
@@ -420,7 +420,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
 
   if {$p_sel eq "MEM"} {
     if {$sys_mem_interconnect_index < 0} {
-      ad_ip_instance smartconnect axi_mem_interconnect
+      ad_ip_instance axi_interconnect axi_mem_interconnect
     }
     set m_interconnect_index $sys_mem_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_mem_interconnect]
@@ -431,7 +431,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp0_interconnect_index < 0} {
       set p_name_int sys_ps7/S_AXI_HP0
       set_property CONFIG.PCW_USE_S_AXI_HP0 {1} [get_bd_cells sys_ps7]
-      ad_ip_instance smartconnect axi_hp0_interconnect
+      ad_ip_instance axi_interconnect axi_hp0_interconnect
     }
     set m_interconnect_index $sys_hp0_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp0_interconnect]
@@ -442,7 +442,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp1_interconnect_index < 0} {
       set p_name_int sys_ps7/S_AXI_HP1
       set_property CONFIG.PCW_USE_S_AXI_HP1 {1} [get_bd_cells sys_ps7]
-      ad_ip_instance smartconnect axi_hp1_interconnect
+      ad_ip_instance axi_interconnect axi_hp1_interconnect
     }
     set m_interconnect_index $sys_hp1_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp1_interconnect]
@@ -453,7 +453,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp2_interconnect_index < 0} {
       set p_name_int sys_ps7/S_AXI_HP2
       set_property CONFIG.PCW_USE_S_AXI_HP2 {1} [get_bd_cells sys_ps7]
-      ad_ip_instance smartconnect axi_hp2_interconnect
+      ad_ip_instance axi_interconnect axi_hp2_interconnect
     }
     set m_interconnect_index $sys_hp2_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp2_interconnect]
@@ -464,7 +464,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp3_interconnect_index < 0} {
       set p_name_int sys_ps7/S_AXI_HP3
       set_property CONFIG.PCW_USE_S_AXI_HP3 {1} [get_bd_cells sys_ps7]
-      ad_ip_instance smartconnect axi_hp3_interconnect
+      ad_ip_instance axi_interconnect axi_hp3_interconnect
     }
     set m_interconnect_index $sys_hp3_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp3_interconnect]
@@ -475,7 +475,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp0_interconnect_index < 0} {
       set p_name_int sys_ps8/S_AXI_HP0_FPD
       set_property CONFIG.PSU__USE__S_AXI_GP2 {1} [get_bd_cells sys_ps8]
-      ad_ip_instance smartconnect axi_hp0_interconnect
+      ad_ip_instance axi_interconnect axi_hp0_interconnect
     }
     set m_interconnect_index $sys_hp0_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp0_interconnect]
@@ -486,7 +486,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp1_interconnect_index < 0} {
       set p_name_int sys_ps8/S_AXI_HP1_FPD
       set_property CONFIG.PSU__USE__S_AXI_GP3 {1} [get_bd_cells sys_ps8]
-      ad_ip_instance smartconnect axi_hp1_interconnect
+      ad_ip_instance axi_interconnect axi_hp1_interconnect
     }
     set m_interconnect_index $sys_hp1_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp1_interconnect]
@@ -497,7 +497,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp2_interconnect_index < 0} {
       set p_name_int sys_ps8/S_AXI_HP2_FPD
       set_property CONFIG.PSU__USE__S_AXI_GP4 {1} [get_bd_cells sys_ps8]
-      ad_ip_instance smartconnect axi_hp2_interconnect
+      ad_ip_instance axi_interconnect axi_hp2_interconnect
     }
     set m_interconnect_index $sys_hp2_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp2_interconnect]
@@ -508,7 +508,7 @@ proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
     if {$sys_hp3_interconnect_index < 0} {
       set p_name_int sys_ps8/S_AXI_HP3_FPD
       set_property CONFIG.PSU__USE__S_AXI_GP5 {1} [get_bd_cells sys_ps8]
-      ad_ip_instance smartconnect axi_hp3_interconnect
+      ad_ip_instance axi_interconnect axi_hp3_interconnect
     }
     set m_interconnect_index $sys_hp3_interconnect_index
     set m_interconnect_cell [get_bd_cells axi_hp3_interconnect]
diff --git a/projects/scripts/adi_project_xilinx.tcl b/projects/scripts/adi_project_xilinx.tcl
index 0e7280b9..ae1f78e4 100644
--- a/projects/scripts/adi_project_xilinx.tcl
+++ b/projects/scripts/adi_project_xilinx.tcl
@@ -1,7 +1,10 @@
 
 ## Define the supported tool version
-if {![info exists REQUIRED_VIVADO_VERSION]} {
-  set REQUIRED_VIVADO_VERSION "2019.1"
+set required_vivado_version "2021.1"
+if {[info exists ::env(REQUIRED_VIVADO_VERSION)]} {
+  set required_vivado_version $::env(REQUIRED_VIVADO_VERSION)
+} elseif {[info exists REQUIRED_VIVADO_VERSION]} {
+  set required_vivado_version $REQUIRED_VIVADO_VERSION
 }
 
 ## Define the ADI_IGNORE_VERSION_CHECK environment variable to skip version check
@@ -14,9 +17,20 @@ if {[info exists ::env(ADI_IGNORE_VERSION_CHECK)]} {
 ## Define the ADI_USE_OOC_SYNTHESIS environment variable to enable out of context
 #  synthesis
 if {[info exists ::env(ADI_USE_OOC_SYNTHESIS)]} {
-  set ADI_USE_OOC_SYNTHESIS 1
+  if {[string equal $::env(ADI_USE_OOC_SYNTHESIS) n]} {
+     set ADI_USE_OOC_SYNTHESIS 0
+  } else {
+     set ADI_USE_OOC_SYNTHESIS 1
+  }
 } elseif {![info exists ADI_USE_OOC_SYNTHESIS]} {
-  set ADI_USE_OOC_SYNTHESIS 0
+   set ADI_USE_OOC_SYNTHESIS 1
+}
+
+## Set number of parallel out of context jobs through environment variable
+if {![info exists ::env(ADI_MAX_OOC_JOBS)]} {
+  set ADI_MAX_OOC_JOBS 4
+} else {
+  set ADI_MAX_OOC_JOBS $::env(ADI_MAX_OOC_JOBS)
 }
 
 ## Set to enable incremental compilation
@@ -34,7 +48,7 @@ set p_prcfg_init ""
 set p_prcfg_list ""
 set p_prcfg_status ""
 
-## Creates a Xilinx project.
+## Creates a Xilinx project for a given board
 #
 # \param[project_name] - name of the project
 # \param[mode] - if set non-project mode will be used, otherwise project mode
@@ -42,87 +56,145 @@ set p_prcfg_status ""
 # \param[parameter_list] - a list of global parameters (parameters of the
 # system_top module)
 #
-# Supported carrier names are: ac701, kc705, vc707, vcu118, kcu105, zed,
+# Supported carrier names are: ac701, kc705, vc707, vcu118, vcu128, kcu105, zed,
 # microzed, zc702, zc706, mitx405, zcu102.
 #
 proc adi_project {project_name {mode 0} {parameter_list {}} } {
 
-  global ad_hdl_dir
-  global ad_ghdl_dir
-  global p_board
-  global p_device
-  global sys_zynq
-  global REQUIRED_VIVADO_VERSION
-  global IGNORE_VERSION_CHECK
-  global ADI_USE_OOC_SYNTHESIS
-  global ADI_USE_INCR_COMP
+  set device ""
+  set board ""
 
+  # Determine the device based on the board name
   if [regexp "_ac701$" $project_name] {
-    set p_device "xc7a200tfbg676-2"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *ac701*] end]
-    set sys_zynq 0
+    set device "xc7a200tfbg676-2"
+    set board [lindex [lsearch -all -inline [get_board_parts] *ac701*] end]
   }
   if [regexp "_kc705$" $project_name] {
-    set p_device "xc7k325tffg900-2"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *kc705*] end]
-    set sys_zynq 0
+    set device "xc7k325tffg900-2"
+    set board [lindex [lsearch -all -inline [get_board_parts] *kc705*] end]
   }
   if [regexp "_vc707$" $project_name] {
-    set p_device "xc7vx485tffg1761-2"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *vc707*] end]
-    set sys_zynq 0
+    set device "xc7vx485tffg1761-2"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vc707*] end]
   }
   if [regexp "_vcu118$" $project_name] {
-    set p_device "xcvu9p-flga2104-2L-e"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *vcu118*] end]
-    set sys_zynq 0
+    set device "xcvu9p-flga2104-2L-e"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vcu118*] end]
+  }
+  if [regexp "_vcu128$" $project_name] {
+    set device "xcvu37p-fsvh2892-2L-e"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vcu128:part0*] end]
   }
   if [regexp "_kcu105$" $project_name] {
-    set p_device "xcku040-ffva1156-2-e"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *kcu102*] end]
-    set sys_zynq 0
+    set device "xcku040-ffva1156-2-e"
+    set board [lindex [lsearch -all -inline [get_board_parts] *kcu105*] end]
   }
   if [regexp "_zed$" $project_name] {
-    set p_device "xc7z020clg484-1"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *zed*] end]
-    set sys_zynq 1
+    set device "xc7z020clg484-1"
+    set board [lindex [lsearch -all -inline [get_board_parts] *zed*] end]
   }
   if [regexp "_coraz7s$" $project_name] {
-    set p_device "xc7z007sclg400-1"
-    set p_board "not-applicable"
-    set sys_zynq 1
+    set device "xc7z007sclg400-1"
+    set board "not-applicable"
   }
   if [regexp "_microzed$" $project_name] {
-    set p_device "xc7z010clg400-1"
-    set p_board "not-applicable"
-    set sys_zynq 1
+    set device "xc7z010clg400-1"
+    set board "not-applicable"
   }
   if [regexp "_zc702$" $project_name] {
-    set p_device "xc7z020clg484-1"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *zc702*] end]
-    set sys_zynq 1
+    set device "xc7z020clg484-1"
+    set board [lindex [lsearch -all -inline [get_board_parts] *zc702*] end]
   }
   if [regexp "_zc706$" $project_name] {
-    set p_device "xc7z045ffg900-2"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *zc706*] end]
-    set sys_zynq 1
+    set device "xc7z045ffg900-2"
+    set board [lindex [lsearch -all -inline [get_board_parts] *zc706*] end]
   }
   if [regexp "_mitx045$" $project_name] {
-    set p_device "xc7z045ffg900-2"
-    set p_board "not-applicable"
-    set sys_zynq 1
+    set device "xc7z045ffg900-2"
+    set board "not-applicable"
   }
   if [regexp "_zcu102$" $project_name] {
-    set p_device "xczu9eg-ffvb1156-2-e"
-    set p_board [lindex [lsearch -all -inline [get_board_parts] *zcu102*] end]
+    set device "xczu9eg-ffvb1156-2-e"
+    set board [lindex [lsearch -all -inline [get_board_parts] *zcu102*] end]
+  }
+  if [regexp "_vmk180_es1$" $project_name] {
+    enable_beta_device xcvm*
+    xhub::refresh_catalog [xhub::get_xstores xilinx_board_store]
+    xhub::install [xhub::get_xitems xilinx.com:xilinx_board_store:vmk180_es:*] -quiet
+    set_param board.repoPaths [get_property LOCAL_ROOT_DIR [xhub::get_xstores xilinx_board_store]]
+    set device "xcvm1802-vsva2197-2MP-e-S-es1"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vmk180_es*] end]
+  }
+  if [regexp "_vmk180$" $project_name] {
+    set device "xcvm1802-vsva2197-2MP-e-S"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vmk180*] end]
+  }
+  if [regexp "_vck190$" $project_name] {
+    set device "xcvc1902-vsva2197-2MP-e-S"
+    set board [lindex [lsearch -all -inline [get_board_parts] *vck190*] end]
+  }
+  if [regexp "_vc709$" $project_name] {
+    set device "xc7vx690tffg1761-2"  
+    set board [lindex [lsearch -all -inline [get_board_parts] *vc709*] end]
+  }
+
+  adi_project_create $project_name $mode $parameter_list $device $board
+}
+
+
+## Creates a Xilinx project.
+#
+# \param[project_name] - name of the project
+# \param[mode] - if set non-project mode will be used, otherwise project mode
+# flow, see UG892 for more information
+# \param[parameter_list] - a list of global parameters (parameters of the
+# system_top module)
+# \param[device] - Canonical Xilinx device string
+# \param[board] - board BSP name (optional)
+#
+proc adi_project_create {project_name mode parameter_list device {board "not-applicable"}}  {
+
+  global ad_hdl_dir
+  global ad_ghdl_dir
+  global p_board
+  global p_device
+  global sys_zynq
+  global required_vivado_version
+  global IGNORE_VERSION_CHECK
+  global ADI_USE_OOC_SYNTHESIS
+  global ADI_USE_INCR_COMP
+
+  ## update the value of $p_device only if it was not already updated elsewhere
+  if {$p_device eq "none"} {
+    set p_device $device
+  } 
+  set p_board $board
+
+  if [regexp "^xc7z" $p_device] {
+    set sys_zynq 1
+  } elseif [regexp "^xczu" $p_device]  {
     set sys_zynq 2
+  } elseif [regexp "^xcv\[ecmph\]" $p_device]  {
+    set sys_zynq 3
+  } else {
+    set sys_zynq 0
   }
 
   set VIVADO_VERSION [version -short]
-  if {[string compare $VIVADO_VERSION $REQUIRED_VIVADO_VERSION] != 0} {
-    puts -nonewline "CRITICAL WARNING: vivado version mismatch; "
-    puts -nonewline "expected $REQUIRED_VIVADO_VERSION, "
-    puts -nonewline "got $VIVADO_VERSION.\n"
+  if {$IGNORE_VERSION_CHECK} {
+    if {[string compare $VIVADO_VERSION $required_vivado_version] != 0} {
+      puts -nonewline "CRITICAL WARNING: vivado version mismatch; "
+      puts -nonewline "expected $required_vivado_version, "
+      puts -nonewline "got $VIVADO_VERSION.\n"
+    }
+  } else {
+    if {[string compare $VIVADO_VERSION $required_vivado_version] != 0} {
+      puts -nonewline "ERROR: vivado version mismatch; "
+      puts -nonewline "expected $required_vivado_version, "
+      puts -nonewline "got $VIVADO_VERSION.\n"
+      puts -nonewline "This ERROR message can be down-graded to CRITICAL WARNING by setting ADI_IGNORE_VERSION_CHECK environment variable to 1. Be aware that ADI will not support you, if you are using a different tool version.\n"
+      exit 2
+    }
   }
 
   if {$mode == 0} {
@@ -158,7 +230,10 @@ proc adi_project {project_name {mode 0} {parameter_list {}} } {
   update_ip_catalog
 
   ## Load custom message severity definitions
-  source $ad_hdl_dir/projects/scripts/adi_xilinx_msg.tcl
+
+  if {![info exists ::env(ADI_DISABLE_MESSAGE_SUPPRESION)]} {
+    source $ad_hdl_dir/projects/scripts/adi_xilinx_msg.tcl
+  }
 
   ## In Vivado there is a limit for the number of warnings and errors which are
   ## displayed by the tool for a particular error or warning; the default value
@@ -234,9 +309,10 @@ proc adi_project_run {project_name} {
 
   global ADI_POWER_OPTIMIZATION
   global ADI_USE_OOC_SYNTHESIS
+  global ADI_MAX_OOC_JOBS
 
   if {$ADI_USE_OOC_SYNTHESIS == 1} {
-    launch_runs -jobs 4 system_*_synth_1 synth_1
+    launch_runs -jobs $ADI_MAX_OOC_JOBS system_*_synth_1 synth_1
   } else {
     launch_runs synth_1
   }
@@ -253,10 +329,12 @@ proc adi_project_run {project_name} {
   set_property STEPS.POST_PLACE_POWER_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]
   }
 
+  set_param board.repoPaths [get_property LOCAL_ROOT_DIR [xhub::get_xstores xilinx_board_store]]
+
   launch_runs impl_1 -to_step write_bitstream
   wait_on_run impl_1
   open_run impl_1
-  report_timing_summary -file timing_impl.log
+  report_timing_summary -warn_on_violation -file timing_impl.log
 
   if {[info exists ::env(ADI_GENERATE_UTILIZATION)]} {
     set csv_file resource_utilization.csv
@@ -280,10 +358,80 @@ proc adi_project_run {project_name} {
       } issue ] != 0 } {
         puts "GENERATE_REPORTS: tclapp::xilinx::designutils not installed"
       }
-  } else {
+
+      # Define a list of IPs for which to generate report utilization
+      set IP_list {
+        ad_ip_jesd_204_tpl_adc
+        ad_ip_jesd_204_tpl_dac
+        axi_jesd204_rx
+        axi_jesd204_tx
+        jesd204_rx
+        jesd204_tx
+        axi_adxcvr
+        util_adxcvr
+        axi_dmac
+        util_cpack2
+        util_upack2
+      }
+
+      foreach IP_name $IP_list {
+	set output_file ${IP_name}_resource_utilization.log
+        file delete $output_file
+        foreach IP_instance [ get_cells -quiet -hierarchical -filter " ORIG_REF_NAME =~ $IP_name || REF_NAME =~ $IP_name " ] {
+          report_utilization -hierarchical -hierarchical_depth 1 -cells $IP_instance -file $output_file -append -quiet
+          report_property $IP_instance -file $output_file -append -quiet
+          set report_file [ open $output_file a ]
+          puts $report_file "\n\n\n"
+          close $report_file
+        }
+      }
+    } else {
     puts "GENERATE_REPORTS: Resource utilization files won't be generated because ADI_GENERATE_UTILIZATION env var is not set"
   }
 
+  if {[info exists ::env(ADI_GENERATE_XPA)]} {
+    set csv_file power_analysis.csv
+    set Layers "8to11"
+    set CapLoad "20"
+    set ToggleRate "15.00000"
+    set StatProb "0.500000"
+
+    set_load $CapLoad [all_outputs]
+    set_operating_conditions -board_layers $Layers
+    set_switching_activity -default_toggle_rate $ToggleRate
+    set_switching_activity -default_static_probability $StatProb
+    set_switching_activity -type lut -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type register -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type shift_register -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type lut_ram -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type bram -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type dsp -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type gt_rxdata -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type gt_txdata -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type io_output -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type bram_enable -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type bram_wr_enable -toggle_rate $ToggleRate -static_probability $StatProb -all
+    set_switching_activity -type io_bidir_enable -toggle_rate $ToggleRate -static_probability $StatProb -all
+    report_power -file $csv_file
+
+    set fileRead [open $csv_file r]
+    set filecontent [read $fileRead]
+    set input_list [split $filecontent "\n"]
+
+    set TextList [lsearch -all -inline $input_list "*Total On-Chip Power (W)*"]
+    set on_chip_pwr "[lindex [lindex $TextList 0] 6] W"
+    set TextList [lsearch -all -inline $input_list "*Junction Temperature (C)*"]
+    set junction_temp "[lindex [lindex $TextList 0] 5] *C"
+    close $fileRead
+
+    set fileWrite [open $csv_file w]
+    puts $fileWrite "On-chip_power,Junction_temp"
+    puts $fileWrite "$on_chip_pwr,$junction_temp"
+    close $fileWrite
+  } else {
+    puts "GENERATE_REPORTS: Power analysis files won't be generated because ADI_GENERATE_XPA env var is not set"
+  }
+
   # Look for undefined clocks which do not show up in the timing summary
   set timing_check [check_timing -override_defaults no_clock -no_header -return_string]
   if {[regexp { (\d+) register} $timing_check -> num_regs]} {
@@ -301,11 +449,13 @@ proc adi_project_run {project_name} {
 
   file mkdir $project_name.sdk
 
-  if [expr [string match *VIOLATED* $[report_timing_summary -return_string]] == 1] {
-    file copy -force $project_name.runs/impl_1/system_top.sysdef $project_name.sdk/system_top_bad_timing.hdf
+  set timing_string $[report_timing_summary -return_string]
+  if { [string match "*VIOLATED*" $timing_string] == 1 ||
+       [string match "*Timing constraints are not met*" $timing_string] == 1} {
+    write_hw_platform -fixed -force  -include_bit -file $project_name.sdk/system_top_bad_timing.xsa
     return -code error [format "ERROR: Timing Constraints NOT met!"]
   } else {
-    file copy -force $project_name.runs/impl_1/system_top.sysdef $project_name.sdk/system_top.hdf
+    write_hw_platform -fixed -force  -include_bit -file $project_name.sdk/system_top.xsa
   }
 }
 
